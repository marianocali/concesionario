08-09-2015
se agrega el DaoFactory para insertar los Dao usando un DaoFactory en lugar de un new.
La idea es tener un único Factory para todos los DaoFactory

En la clase AutoDaoImpl se agrega findByConcesionarioId.
Se agrega la clase de Servicio ConcesionarioService
En ConcesionarioDaoImpl se agrega el metodo estatico agregarAutos(Long idConcesionario, ArrayList<Auto> autos) 
Se implementa el patrón Singleton para ConcesionarioDaoImpl.
Se agrega el test testAgregarAutos.
En Auto se pone Concesionario (fetch = FetchType.LAZY)

Se agrega el metodo getAutoDao en DaoFactory
Se elimina el getAutoDao del test y se usa autoDao usando el DaoFactory
se implementa getInstance para usar AutoDao como Singleton


25-09-2015
En ConcesionarioService 
    se agrega el metodo informarAutos que informa los datos del concesionario y los datos de sus autos.
    se agrega el método estatico eliminar 
Se agrega la invocación a través del daoFactory.
Concesionario se agrega el toString, NOTA: no se debe mostrar los autos en el toString porque sino hace un bucle infinito
Se agrega test de informarAutos.
ConcesionarioDaoImpl 
    se agrega el metodo informarAutos
    se agrega el método eliminar que recibe un idConcesionario
AutoService se agrega la clase con el metodo informarAutosMayorAPrecio
AutoDaoImpl se agrega el método informarAutosMayorAPrecio

18-07-2016
Se agrega la clase Persona, Cliente, Vendedor en el dominio.
Se agregan los Daos VendedorDao, ClienteDao, ClienteDaoImpl, PersonaDao,
Se agrega el test ClienteDaoTest
